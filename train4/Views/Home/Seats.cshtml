@model List<train2.Models.Seat>

@{
    ViewData["Title"] = "Вибір місць";
}

<div class="container mt-4">
    <!-- Заголовок з кнопкою повернення -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2>Потяг №@ViewBag.TrainNumber - @ViewBag.TravelDate</h2>
        </div>
        <div>
            <a asp-controller="Home" asp-action="Index"
               asp-route-fromStation="@ViewBag.FromStation"
               asp-route-toStation="@ViewBag.ToStation"
               asp-route-date="@ViewBag.TravelDate"
               class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Повернутися на головну сторінку
            </a>
        </div>
    </div>

    @if (ViewBag.NoSeatsMessage != null)
    {
        <div class="alert alert-warning">
            @ViewBag.NoSeatsMessage
            <br>
            <a asp-controller="Home" asp-action="Index"
               asp-route-fromStation="@ViewBag.FromStation"
               asp-route-toStation="@ViewBag.ToStation"
               asp-route-date="@ViewBag.TravelDate"
               class="btn btn-secondary mt-2">
                Повернутися на головну сторінку
            </a>
        </div>
    }
    else
    {
        <div class="legend mb-3">
            <span class="badge bg-success me-2">■ Вільне</span>
            <span class="badge bg-warning me-2">■ Заброньоване</span>
            <span class="badge bg-danger me-2">■ Зайняте</span>
            <span class="badge bg-primary">■ Вибране</span>
        </div>

        <div id="carriageTabs" class="mb-3"></div>
        <div id="carriageContent"></div>
    }
</div>

<div id="ticketModal" class="modal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); z-index:999;">
    <div style="background:white; width:400px; margin:10% auto; padding:20px; border-radius:10px; position:relative;">
        <span style="position:absolute; right:10px; top:10px; cursor:pointer;" onclick="closeTicketModal()">&times;</span>
        <h4>Деталі квитка</h4>
        <p><strong>З:</strong> <span id="modalFrom">@ViewBag.FromStation</span></p>
        <p><strong>До:</strong> <span id="modalTo">@ViewBag.ToStation</span></p>
        <p><strong>Номер вагона:</strong> <span id="modalCarriage"></span></p>
        <p><strong>Місце:</strong> <span id="modalSeat"></span></p>
        <p><strong>Тривалість:</strong> <span id="modalDuration"></span></p>
        <p><strong>Ціна:</strong> <span id="modalPrice"></span> грн</p>
        <button class="btn btn-success" onclick="confirmBooking()">Купити</button>
    </div>
</div>

@Html.AntiForgeryToken()

<style>
    .seat {
        width: 40px; height: 40px; border: 2px solid #ddd; border-radius: 5px;
        display: inline-flex; align-items: center; justify-content: center;
        margin: 2px; cursor: pointer; font-weight: bold; transition: all 0.3s;
    }
    .available { background: #d4edda; border-color: #28a745; }
    .reserved { background: #fff3cd; border-color: #ffc107; cursor: not-allowed; }
    .occupied { background: #f8d7da; border-color: #dc3545; cursor: not-allowed; }
    .selected { background: #cce7ff; border-color: #007bff; transform: scale(1.1); }
    .seat:hover.available { background: #c3e6cb; }
</style>

<script>
    const data = @Html.Raw(Json.Serialize(ViewBag.SeatsData ?? new List<object>()));
    let selectedSeat = null;

    // ИСПРАВЛЕНИЕ: Получаем данные из ViewBag с проверками
    const trainId = @ViewBag.TrainId;
    const travelDate = '@ViewBag.TravelDate'; // Формат yyyy-MM-dd
    const fromStationId = @ViewBag.FromStationId;
    const toStationId = @ViewBag.ToStationId;

    // ИСПРАВЛЕНИЕ: Добавляем отладку
    console.log('=== DEBUG: Параметры страницы ===');
    console.log('trainId:', trainId);
    console.log('travelDate:', travelDate);
    console.log('fromStationId:', fromStationId);
    console.log('toStationId:', toStationId);
    console.log('================================');

    const carriages = {};
    data.forEach(seat => {
        const num = seat.carriage_number;
        if (!carriages[num]) carriages[num] = { number: num, type: seat.carriage_type, seats: [] };
        carriages[num].seats.push(seat);
    });

    function renderTabs() {
        const tabs = Object.keys(carriages).sort((a, b) => a - b).map(num =>
            `<button class="btn btn-outline-primary me-2" onclick="showCarriage(${num})">
                        Вагон ${num} (${carriages[num].type})
                    </button>`
        ).join('');
        document.getElementById('carriageTabs').innerHTML = tabs;
    }

    function showCarriage(num) {
        const c = carriages[num];
        const available = c.seats.filter(s => s.status === 'available').length;

        document.getElementById('carriageContent').innerHTML = `
                    <div class="border rounded p-3">
                        <h4>${c.type} - Вагон №${c.number}</h4>
                        <p>Вільних: ${available} з ${c.seats.length}</p>
                        <div class="seats-container">
                            ${c.seats.map(seat =>
            `<div class="seat ${seat.status}"
                                      data-id="${seat.seat_id}"
                                      data-number="${seat.seat_number}"
                                      data-carriage="${seat.carriage_number}"
                                      onclick="selectSeat(this)">${seat.seat_number}</div>`
        ).join('')}
                        </div>
                    </div>`;

        document.querySelectorAll('#carriageTabs button').forEach(b => b.classList.remove('btn-primary'));
        document.querySelectorAll('#carriageTabs button').forEach(b => b.classList.add('btn-outline-primary'));
        event?.target?.classList?.remove('btn-outline-primary');
        event?.target?.classList?.add('btn-primary');
    }

    async function selectSeat(el) {
        if (!el.classList.contains('available')) return;

        document.querySelectorAll('.seat.selected').forEach(s => s.classList.remove('selected'));
        el.classList.add('selected');

        selectedSeat = {
            id: el.dataset.id,
            number: el.dataset.number,
            carriage: el.dataset.carriage
        };

        // ИСПРАВЛЕНИЕ: Проверяем все параметры перед отправкой запроса
        if (!trainId || !travelDate || !selectedSeat.id || !fromStationId || !toStationId) {
            console.error('Не все параметры определены:', {
                trainId, travelDate, seatId: selectedSeat.id, fromStationId, toStationId
            });
            alert("Ошибка: не все параметры определены для получения информации о билете.");
            return;
        }

        console.log('=== DEBUG: Запрос GetTicketDetails ===');
        console.log('Параметры запроса:', {
            trainId, travelDate, seatId: selectedSeat.id, fromStationId, toStationId
        });

        try {

            const url = `/Home/GetTicketDetails?trainId=${trainId}&travelDate=${encodeURIComponent(travelDate)}&seatId=${selectedSeat.id}&fromStationId=${fromStationId}&toStationId=${toStationId}`;
            console.log('URL запроса:', url);

            const response = await fetch(url);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('Ответ сервера:', data);

            // ИСПРАВЛЕНИЕ: Проверяем наличие ошибки в ответе
            if (data.error) {
                alert(`Ошибка: ${data.error}`);
                return;
            }

            // ИСПРАВЛЕНИЕ: Проверяем наличие всех необходимых данных
            if (!data.from_station_name || !data.to_station_name) {
                alert("Ошибка: сервер вернул неполные данные о билете.");
                return;
            }

            document.getElementById("modalFrom").textContent = data.from_station_name;
            document.getElementById("modalTo").textContent = data.to_station_name;
            document.getElementById("modalCarriage").textContent = data.carriage_number;
            document.getElementById("modalSeat").textContent = data.seat_number;
            document.getElementById("modalDuration").textContent = `${data.departure_time} — ${data.arrival_time}`;
            document.getElementById("modalPrice").textContent = data.total_price;

            document.getElementById("ticketModal").style.display = "block";
        } catch (error) {
            console.error('Ошибка при получении информации о билете:', error);
            alert("Помилка при отриманні інформації про квиток: " + error.message);
        }
    }

    function closeTicketModal() {
        document.getElementById("ticketModal").style.display = "none";
    }

    async function confirmBooking() {
        if (!selectedSeat) return;

        const confirmed = confirm("Вы действительно хотите забронировать этот билет?");
        if (!confirmed) return;

        // ИСПРАВЛЕНИЕ: Проверяем все параметры перед бронированием
        if (!trainId || !travelDate || !selectedSeat.id || !fromStationId || !toStationId) {
            alert("Ошибка: не все параметры определены для бронирования.");
            return;
        }

        console.log('=== DEBUG: Бронирование билета ===');
        console.log('Параметры бронирования:', {
            seatId: selectedSeat.id,
            trainId: trainId,
            travelDate: travelDate,
            fromStationId: fromStationId,
            toStationId: toStationId
        });

        try {
            const response = await fetch('/Home/BookSeatConfirmed', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]').value
                },
                body: new URLSearchParams({
                    seatId: selectedSeat.id,
                    trainId: trainId,
                    travelDate: travelDate, // ИСПРАВЛЕНИЕ: Используем переменную, а не ViewBag
                    fromStationId: fromStationId,
                    toStationId: toStationId
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            console.log('Результат бронирования:', result);

            if (result.success) {
                showSuccessModal(result);
                closeTicketModal();
                setTimeout(() => {
                    location.reload();
                }, 15000); // ИЗМЕНЕНО: увеличено до 15 секунд
            } else {
                showErrorModal(result.message);
            }
        } catch (error) {
            console.error('Ошибка при бронировании:', error);
            showErrorModal('Ошибка при бронировании билета: ' + error.message);
        }
    }

    // Функция для показа успешного бронирования
    function showSuccessModal(result) {
        const modal = document.createElement('div');
        modal.innerHTML = `
                    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); z-index: 9999; display: flex; justify-content: center; align-items: center;">
                        <div style="background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); max-width: 500px; text-align: center; animation: modalSlideIn 0.3s ease-out;">
                            <div style="color: #28a745; font-size: 48px; margin-bottom: 20px;">
                                ✅
                            </div>
                                <h3 style="color: #28a745; margin-bottom: 20px;">Квиток успішно заброньовано!</h3>

                            <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 20px 0; text-align: left;">
                                <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                                    <span style="font-weight: 600;">Вартість:</span>
                                    <span style="color: #28a745; font-weight: 700; font-size: 18px;">${result.total_price} грн</span>
                                </div>
                                <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                                    <span style="font-weight: 600;">Місце:</span>
                                    <span>${selectedSeat.number} (вагон ${selectedSeat.carriage})</span>
                                </div>
                                <div style="display: flex; justify-content: space-between;">
                                    <span style="font-weight: 600;">Дата поїздки:</span>
                                    <span>${travelDate}</span>
                                </div>
                            </div>

                            <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 8px; margin: 20px 0;">
                                <p style="margin: 0; color: #856404;">
                                        <strong>💡 Важливо:</strong> Для оплати квитка зверніться до бухгалтера.
                                </p>
                            </div>

                            <button onclick="this.parentElement.parentElement.remove()"
                                    style="background: #007bff; color: white; border: none; padding: 12px 30px; border-radius: 8px; font-size: 16px; cursor: pointer; margin-top: 10px;">
                                Зрозуміло
                            </button>

                            <p style="color: #6c757d; font-size: 14px; margin-top: 15px;">
                                Вікно закриється через 15 секунд...
                                Інформацію про квиток можна знайти в особистому кабінеті
                            </p>
                        </div>
                    </div>
                `;

        document.body.appendChild(modal);

        // ДОБАВЛЕНО: Автоматическое закрытие через 15 секунд
        setTimeout(() => {
            modal.remove();
        }, 15000);
    }

    // Функция для показа ошибки
    function showErrorModal(message) {
        const modal = document.createElement('div');
        modal.innerHTML = `
                    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); z-index: 9999; display: flex; justify-content: center; align-items: center;">
                        <div style="background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); max-width: 400px; text-align: center;">
                            <div style="color: #dc3545; font-size: 48px; margin-bottom: 20px;">
                                ❌
                            </div>
                            <h3 style="color: #dc3545; margin-bottom: 20px;">Ошибка бронирования</h3>
                            <p style="color: #6c757d; margin-bottom: 30px;">${message}</p>
                            <button onclick="this.parentElement.parentElement.remove()"
                                    style="background: #dc3545; color: white; border: none; padding: 12px 30px; border-radius: 8px; font-size: 16px; cursor: pointer;">
                                Закрыть
                            </button>
                        </div>
                    </div>
                `;

        document.body.appendChild(modal);
    }

    // Инициализация страницы
    if (Object.keys(carriages).length > 0) {
        renderTabs();
        showCarriage(Math.min(...Object.keys(carriages)));
    }
</script>






